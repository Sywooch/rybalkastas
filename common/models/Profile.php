<?php

/*
 * This file is part of the Dektrium project.
 *
 * (c) Dektrium project <http://github.com/dektrium/>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace common\models;

use brussens\behaviors\AvatarBehavior;
use dektrium\user\models\User;
use yii\db\ActiveRecord;
use dektrium\rbac\models\Assignment;
use Yii;


/**
 * This is the model class for table "profile".
 *
 * @property integer $user_id
 * @property string  $name
 * @property string  $public_email
 * @property string  $gravatar_email
 * @property string  $gravatar_id
 * @property string  $location
 * @property string  $website
 * @property string  $bio
 * @property string  $avatar
 *
 * @author Dmitry Erofeev <dmeroff@gmail.com
 */
class Profile extends \dektrium\user\models\Profile
{
    /** @var \dektrium\user\Module */



    public function rules()
    {
        $rules = parent::rules(); // TODO: Change the autogenerated stub
        $rules[] = ['avatar', 'file', 'extensions' => 'jpeg, jpg, gif, png'];
        return $rules;
    }

    public function behaviors()
    {
        return [
            [
                'class' => '\yiidreamteam\upload\ImageUploadBehavior',
                'attribute' => 'avatar',
                'thumbs' => [
                    'thumb' => ['width' => 250, 'height' => 250],
                ],
                'filePath' => '@frontend/web/img/avatars/[[pk]]_[[filename]].[[extension]]',
                'fileUrl' => '/img/avatars/[[pk]]_[[filename]].[[extension]]',
                'thumbPath' => '@frontend/web/img/avatars/[[profile]]_[[pk]]_[[filename]].[[extension]]',
                'thumbUrl' => '/img/avatars/[[profile]]_[[pk]]_[[filename]].[[extension]]',
            ],
        ];
    }

    public function attributeLabels()
    {
        $labels = parent::attributeLabels(); // TODO: Change the autogenerated stub
        $labels['avatar'] = 'Изображение';
        return $labels;
    }

    public function getThumbUrl(){
        if(!is_file($this->getUploadedFilePath('avatar', 'thumb'))){
            return Yii::$app->params['emptyAvatar'];
        }
        return $this->getThumbFileUrl('avatar', 'thumb');
    }

    public function getUser()
    {
        return $this->hasOne($this->module->modelMap['User'], ['id' => 'user_id']);
    }

    public function getAssignment()
    {
        $connection = Yii::$app->getDb();
        $cmd = $connection->createCommand("SELECT item_name FROM auth_assignment WHERE user_id = $this->user_id");
        $res = $cmd->queryOne();
        $item_name = $res['item_name'];


        $cmd2 = $connection->createCommand("SELECT description FROM auth_item WHERE auth_item.name = '$item_name'");
        $res = $cmd2->queryOne();
        return $res['description'];
    }

    public function getNotifications()
    {
        $model = UserNotifications::find()->where("user_id = $this->user_id")->orderBy("id DESC")->all();
        if(empty($model)){
            return false;
        } else {
            return $model;
        }

    }

    public function getFollowers()
    {
        $followers = UserFollowers::find()->where("user_id = $this->user_id")->all();
        $ids = [];
        foreach($followers as $f){
            $ids[] = $f->follower_id;
        }
        $users = User::find()->where(['in', 'id', $ids])->all();
        return $users;
    }

    public function getFollowing()
    {
        $following = UserFollowers::find()->where("follower_id = $this->user_id")->all();
        $ids = [];
        foreach($following as $f){
            $ids[] = $f->user_id;
        }
        $users = User::find()->where(['in', 'id', $ids])->all();
        return $users;
    }

    public function isFollowing($id){
        $following = UserFollowers::find()->where("follower_id = $this->user_id")->andWhere("user_id = $id")->one();
        if(empty($following))return(false);
        return true;
    }

    public function getActivityCount(){
        $year = date("Y");
        $month = date("m");
        $day = date ("d");

        $count = UserActivity::find()->where("date BETWEEN '$year-$month-$day 00:00:00' AND '$year-$month-$day 23:59:59'")->andWhere("user_id = $this->user_id")->count();
        return $count;
    }
}
