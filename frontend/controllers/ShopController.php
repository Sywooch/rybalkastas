<?php

namespace frontend\controllers;

use Yii;
use yii\caching\TagDependency;
use yii\data\Pagination;
use yii\helpers\Inflector;
use yii\web\Controller;
use yii\web\ForbiddenHttpException;
use yii\web\NotFoundHttpException;
use yii\web\Response;
use dvizh\cart\models\tools\CartQuery;
use dektrium\user\traits\AjaxValidationTrait;
use common\models\SCCategories;
use common\models\SCCategoriesSearch;
use common\models\SCCategoriesSearchMicro;
use common\models\SCLaterProducts;
use common\models\SCProductOptions;
use common\models\SCProductRequest;
use common\models\SCProducts;
use common\models\SCRatings;
use common\models\SCTags;
use frontend\models\AddToCartForm;
use frontend\models\ReviewForm;

/**
 * Site controller
 */
class ShopController extends Controller
{
    const CATEGORY_VIEW = 0;
    const TABLE_VIEW    = 1;
    const THUMB_VIEW    = 2;

    use AjaxValidationTrait;

    public function behaviors()
    {
        //Yii::$app->pageCache->flush();

        if (empty($_GET['product'])) {
            $tag = 'category_' . (!empty($_GET['id']) ? $_GET['id'] : null);
        } else {
            $tag = 'product_' . (!empty($_GET['product']) ? $_GET['product'] : null);
        }

        $behaviors = [
            'pageCache' => [
                'class' => 'yii\filters\PageCache',
                'cache' => 'dbCache',
                'only' => ['category', 'actions', 'tagged'],
                'duration' => 86400,
                'dependency' => [
                    'class' => TagDependency::className(),
                    'tags' => $tag,
                ],
                'variations' => [
                    \Yii::$app->user->can('alphaTester'),
                    \Yii::$app->user->can('Employee'),
                    \Yii::$app->user->isGuest,
                    !empty(\Yii::$app->user->identity->customer->card) ? \Yii::$app->user->identity->customer->card : null,
                    \Yii::$app->request->isAjax,
                    \Yii::$app->request->isPjax,
                    !empty($_GET['id']) ? $_GET['id'] : null,
                    !empty($_GET['monufacturer']) ? $_GET['monufacturer'] : null,
                    !empty($_GET['tag']) ? $_GET['tag'] : null,
                    !empty($_GET['SCCategoriesSearch']) ? $_GET['SCCategoriesSearch'] : null,
                    !empty($_GET['product']) ? $_GET['product'] : null,
                    !empty($_GET['sort']) ? $_GET['sort'] : null,
                    !empty($_GET['onlyAvailable']) ? $_GET['onlyAvailable'] : null,
                    !empty($_GET['onlyActions']) ? $_GET['onlyActions'] : null,
                ]
            ],
        ];

        return $behaviors; // TODO: Change the autogenerated stub
    }

    /**
     * @param null $id
     * @param null $slug
     * @param null $product
     * @return string
     * @throws NotFoundHttpException
     * @throws \Throwable
     */
    public function actionCategory($id = null, $slug = null, $product = null)
    {
        set_time_limit(60);

        TagDependency::invalidate(Yii::$app->cache, 'mainCachedTag');

        $rating = new ReviewForm();

        $rating->stars = 5;

        if ($rating->load(Yii::$app->request->post()) &&
            !Yii::$app->user->isGuest &&
            empty(SCRatings::find()->where(['user_id' => Yii::$app->user->identity->customer->customerID])->andWhere(['categoryID' => $id])->one()))
        {
            $model = new SCRatings();

            $model->categoryID = $id;
            $model->rating = $rating->stars;
            $model->date = date('Y-m-d H:i:s');
            $model->user_id = Yii::$app->user->identity->customer->customerID;
            $model->comment_text = $rating->text;
            $model->approved = 0;
            $model->hidden = 0;
            $model->response_text = "";

            if ($model->save()) {
                Yii::$app->session->setFlash('notify', ['msg' => 'Отзыв успешно отправлен!', 'icon' => 'fa-check']);

                return $this->refresh();
            } else {
                Yii::$app->session->setFlash('notify', ['msg' => 'Отзыв не отправлен!', 'icon' => 'fa-exclamation']);
            }
        }

        $q = SCRatings::find()
               ->where(['not', 'hidden', 1])
               ->where(['approved' => 1])
            ->andWhere(['categoryID' => $id])
             ->orderBy('date DESC');

        $countQuery = clone $q;

        $rpages = new Pagination(['totalCount' => $countQuery->count()]);

        $ratings = $q->offset($rpages->offset)->limit($rpages->limit)->all();

        $cache = Yii::$app->cache;

        if (isset($_GET['_pjax']) && $product <> null) {
            $productModel = SCProducts::findOne($product);

            $appendix  = null;
            $prependix = null;

            $this->view->title = $productModel->name_ru;

            //if (SCCategories::findOne($product->categoryID)->menutype == 2) $appendix = 'color_grid';
            if (SCCategories::findOne($productModel->categoryID)->menutype == 3) $prependix = 'size_chooser';

            return $this->renderAjax('category/product_views/parts/_product_chunk', [
                'model'     => $productModel,
                'appendix'  => $appendix,
                'prependix' => $prependix
            ]);
        }

        if (isset($_POST['enableInfinite'])) {
            if ($_POST['enableInfinite'] == 1) {
                \Yii::$app->session->set('user.enableInfiniteScroll', 1);
            } elseif ($_POST['enableInfinite'] == 0) {
                \Yii::$app->session->set('user.enableInfiniteScroll', 0);
            }

            $this->redirect(['shop/category', 'id' => $id]);
        }

        if ($id == null && $slug == null) {
            Throw new NotFoundHttpException;
        }

        $nestedViews = [5];

        $model = SCCategories::find()
            ->where(['categoryID' => $id])
              ->one();

        if (empty($model)) {
            throw new NotFoundHttpException();
        }

        $testParent = SCCategories::find()
             ->select(['menutype', 'categoryID'])
              ->where(['categoryID' => $model->parent])
            ->asArray()
                ->one();

        if (in_array($testParent['menutype'], $nestedViews)) {
            return $this->redirect(['category', 'id' => $testParent['categoryID']]);
        }

        if (empty($model)) Throw new NotFoundHttpException;

        /*
        if ($model->menutype <> 0) {
            UserMeta::updateAll(
                ['$addToSet' => ['ips' => $_SERVER['REMOTE_ADDR']]],
                ['date' => date('d-m-Y')],
                ['upsert'=>true]
            );
        }
        */

        $searchModel = new SCCategoriesSearch;
        $searchModel->price = $model->meta->minPrice . "," . $model->meta->maxPrice;

        //ДЛЯ ФИЛЬТРА
        //КОНЕЦ ДЛЯ ФИЛЬТРА

        $dataProvider = $searchModel->search($id, false);

        //$params = Yii::$app->request->queryParams['SCCategoriesSearch'];

        Yii::$app->db->cache(function () use ($dataProvider, $model) {
            return $dataProvider->prepare();
        }, 604800, new TagDependency(['tags' => 'category_' . $model->categoryID]));

        $products = SCProducts::find()
                 ->where(['categoryID' => $id])
               ->orderBy("IF( in_stock > 0, CONCAT(1), CONCAT(0)) DESC")
            ->addOrderBy('sort_order ASC')
                   ->all();

        if (empty($products) && $model->menutype <> 0 && !in_array($model->menutype, $nestedViews)) {
            return $this->render('category/product_views/construct', ['model' => $model]);
        }

        if ($model->menutype <> 0 && !Yii::$app->user->isGuest) {
            Yii::$app->user->identity->viewProduct($model->categoryID);
        }

        //TEMP
        /*
         * 0 - Простая категория
         * 1 - Таблица
         * 2 - Миниатюры
         * 3 - Одежда
         * 4 - Катера
         * 5 - Миниатюры с вкладками
         * 6 - Один товар
         */
        $menutypes = ['0' => 'category', '1' => 'table', '2' => 'thumbnails', '3' => 'clothes', '4' => 'table', '5' => 'thumbnail_tabs', '6' => 'table'];

        if(empty($model->meta_title_ru)){
            $model->meta_title_ru = $model->name_ru;
        }

        if ($model->menutype == 0 && $model->show_filter == 1) {
            $folder = 'category/';
            $this->view->params['filter'] = true;
            $this->view->params['model'] = $model;
            $this->view->params['searchModel'] = $searchModel;
            $this->view->title = $model->meta_title_ru;
        } elseif ($model->menutype == 0){
            $folder = 'category/';
            $this->view->title = $model->meta_title_ru;
        } else {
            $folder = 'category/product_views/';

            if (!empty($product)) {
                $prd = SCProducts::findOne($product);

                if (empty($prd->meta_title_ru)) {
                    $this->view->title = $prd->name_ru;
                } else {
                    $this->view->title = $prd->meta_title_ru;
                }

                // ++ ПРАВКИ МЕТАДАННЫХ ОТ СТЕФАНСКОГО
                //$this->view->title = "Купить $prd->name_ru, цена - купить в интернет магазине в Москве с быстрой доставкой";
                // -- ПРАВКИ МЕТАДАННЫХ ОТ СТЕФАНСКОГО

                //Nomenclature::findByCode($prd->product_code);
            } else {
                if (in_array($model->menutype, $nestedViews)) {

                } else {
                    //$this->view->title = $products[0]->name_ru;
                    if (empty($model->meta_title_ru)) {
                        $this->view->title = $model->name_ru;
                    } else {
                        $this->view->title = $model->meta_title_ru;
                    }

                    // ++ ПРАВКИ МЕТАДАННЫХ ОТ СТЕФАНСКОГО
                    /*$name = trim($model->name_ru);
                    $this->view->title = "$name: цены - купить в интернет магазине в Москве";*/
                    // -- ПРАВКИ МЕТАДАННЫХ ОТ СТЕФАНСКОГО
                }
            }
        }

        return $this->render($folder . $menutypes[$model->menutype], [
            'model'        => $model,
            'products'     => $products,
            'product'      => $product,
            'dataProvider' => $dataProvider,
            'id'           => $id,
            'searchModel'  => $searchModel,
            'rating'       => $rating,
            'ratings'      => $ratings,
            'rpages'       => $rpages
        ]);
    }

    /**
     * @param null $id
     * @return string
     * @throws \Throwable
     */
    public function actionActions($id = null){
        ini_set('max_execution_time', 1000);

        if ($id == null) $id = 1;

        $model = SCCategories::findOne($id);

        $searchModel = new SCCategoriesSearch;

        $searchModel->price = $model->meta->minPrice . "," . $model->meta->maxPrice;
        $searchModel->hidden = 0;

        $dataProvider = $searchModel->search($id, true);

        /*Yii::$app->db->cache(function () use ($dataProvider, $model) {
            return $dataProvider->prepare();
        }, 604800, new TagDependency(['tags' => 'category_' . $model->categoryID]));*/


        return $this->render('category/category', [
            'model'        => $model,
            'dataProvider' => $dataProvider,
            'id'           => $id,
            'searchModel'  => $searchModel
        ]);
    }

    /**
     * @param $id
     * @param null $tag
     * @param null $monufacturer
     * @param null $n
     * @return string
     * @throws ForbiddenHttpException
     * @throws \Throwable
     */
    public function actionTagged($id, $tag = null, $monufacturer = null, $n = null)
    {
        if (!empty($n) && $tag <> Inflector::slug($n)) {
            throw new ForbiddenHttpException();
        }

        $model = SCCategories::findOne($id);

        if (empty($tag) && empty($monufacturer)) {
            $this->redirect(['/shop/category', 'id'=>$id]);
        }

        $searchModel = new SCCategoriesSearch;

        $viewparams = ['mons' => 0,'tags' => 0];

        $params = [];

        if (!empty($tag)) {
            $mdTag = SCTags::find()->where(['slug'=>$tag])->one();

            if (empty($mdTag)) {
                $mdTag = new SCTags();

                $mdTag->slug = $tag;
                $mdTag->name = $n;

                $mdTag->save();
            }

            $params['tags'] = $mdTag->name;
            $viewparams['mons'] = 1;
        }

        if (!empty($monufacturer)) {
            $monufacturer = str_replace('_', ' ', $monufacturer);
            //$monufacturer = str_replace('-', '/', $monufacturer);
            $params['monufacturer'] = $monufacturer;

            $viewparams['tags'] = 1;
        }

        //if (!empty($viewparams['tags']) && !empty($viewparams['mons'])) $viewparams = [];

        if (!empty(Yii::$app->request->queryParams['SCCategoriesSearch'])) {
            $params = $params + Yii::$app->request->queryParams['SCCategoriesSearch'];
        }

        $dataProvider = $searchModel->search($id, false, $params, 'tags');

        $dataProvider->prepare();

        $this->view->params['filter'] = true;
        $this->view->params['model'] = $model;
        $this->view->params['searchModel'] = $searchModel;

        return $this->render('category/tagged', [
            'model'        => $model,
            'dataProvider' => $dataProvider,
            'id'           => $id,
            'searchModel'  => $searchModel,
            'viewparams'   => $viewparams,
            'monufacturer' => $monufacturer,
            'tag'          => $tag
        ]);
    }

    /**
     * @return string|Response
     * @throws \yii\db\Exception
     */
    public function actionSearch()
    {
        $searchModel = new SCCategoriesSearchMicro();
        $searchModel->load(Yii::$app->request->get());

        if (mb_strlen($searchModel->search_s) == 11) {
            $model = SCProducts::find()->where(['product_code' => $searchModel->search_s])->one();

            if (!empty($model)) {
                return $this->redirect(['shop/category', 'id'=>$model->categoryID, 'product'=>$model->productID]);
            } else {
                //die;
            }
        }

        if (is_numeric($searchModel->search_s)) {
            $trycode = sprintf("%'.010d", $searchModel->search_s);

            $code = 'F' . $trycode;

            $model = SCProducts::find()->where(['product_code' => $code])->one();

            if(!empty($model)){
                return $this->redirect(['shop/category', 'id'=>$model->categoryID, 'product'=>$model->productID]);
            }
        }

        if (isset($_POST['enableInfinite'])) {
            if ($_POST['enableInfinite'] == 1) {
                \Yii::$app->session->set('user.enableInfiniteScroll', 1);
            } elseif ($_POST['enableInfinite'] == 0) {
                \Yii::$app->session->set('user.enableInfiniteScroll', 0);
            }
        }

        $dataProvider = $searchModel->search();

        if (Yii::$app->session->get('user.enableInfiniteScroll') == 1) {
            $dataProvider->pagination->pageSize = INF;
        }

        return $this->render('search', [
            'dataProvider' => $dataProvider
        ]);
    }

    public function actionAddToCart()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;

        error_reporting(E_ALL);
        ini_set('display_errors', 1);

        $model = new AddToCartForm();
        //$this->performAjaxValidation($model);

        $rval = [];

        CartQuery::invalidateCache();

        $rval['modal'] = '';

        if ($model->load(\Yii::$app->getRequest()->post())) {
            //print_r($model->count);
            if($model->count <= 0)$model->count = 1;

            $product = SCProducts::findOne($model->product);

            if (isset($_POST['removeFromLater']) && !Yii::$app->user->isGuest) {
                $later = SCLaterProducts::find()
                       ->where(['userID' => Yii::$app->user->identity->customer->customerID])
                    ->andWhere(['productID' => $product->productID])
                         ->one();

                if (!empty($later))$later->delete();
            }

            if($model->count >= $product->in_stock) $model->count = $product->in_stock;

            $cartElement = Yii::$app->cart->put($product, $model->count, []);

            $rval['modal'] = $this->renderAjax('//shop/category/_modal_confirm', [
                'product' => $product,
                'count' => $model->count
            ]);
        } else {
            print_r($model->getErrors());
        }

        $rval['chunk'] = $this->renderAjax('category/product_views/parts/_product_chunk', [
            'model'     => $product,
            'appendix'  => null,
            'prependix' => null,
        ]);

        $rval['informer'] = $this->renderAjax('//_blocks/_cart_informer');

        if (Yii::$app->request->isAjax) {
            return $rval;
        } else {
            return $this->redirect(Yii::$app->request->referrer ?: Yii::$app->homeUrl);
        }
    }

    public function actionAddLater($productID)
    {
        if (!Yii::$app->user->isGuest) {
            $product = SCProducts::findOne($productID);

            if (!empty($product)) {
                $check = SCLaterProducts::find()
                       ->where(['userID' => Yii::$app->user->identity->customer->customerID])
                    ->andWhere(['productID' => $product->productID])
                         ->one();

                if (!empty($check)) return true;

                $later = new SCLaterProducts;

                $later->productID = $product->productID;
                $later->userID = Yii::$app->user->identity->customer->customerID;

                $later->save();
            }
        }

        return true;
    }


    public function actionRemoveLater($productID)
    {
        if (!Yii::$app->user->isGuest) {
            $later = SCLaterProducts::find()
                   ->where(['userID' => Yii::$app->user->identity->customer->customerID])
                ->andWhere(['productID'=>$productID])
                     ->one();

            if (!empty($later)) $later->delete();
        }

        return true;
    }

    public function actionRemoveRequested($productID)
    {
        if (!Yii::$app->user->isGuest) {
            $later = SCProductRequest::find()
                   ->where(['customerID' => Yii::$app->user->identity->customer->customerID])
                ->andWhere(['productID'=>$productID])
                     ->one();

            if (!empty($later)) $later->delete();
        }

        return true;
    }

    public function actionSubscribeProduct()
    {
        if (Yii::$app->user->isGuest) return false;

        $mailer = \Yii::$app->mailer_sendmail;

        $id = $_GET['id'];

        $user = Yii::$app->user->identity->customer;

        $product = SCProducts::findOne($id);

        Yii::$app->user->identity->addProductWaiting($product->productID);

        $mail = $mailer->compose(['html' => '@frontend/views/mail/subscription'], ['user'=>$user, 'product'=>$product])
                       ->setFrom(['techbot@rybalkashop.ru' => 'Rybalkashop.ru Рыболов на "Птичке"']);
        $mail->setTo('contacts@rybalkashop.ru');
        $mail->setSubject("Сообщение о предзаказе");
        $mail->send();

        $await = new SCProductRequest;

        $await->productID = $product->productID;
        $await->customerID = $user->customerID;

        $await->save();
        //$mailer->
    }

    public function actionCheckAttrs()
    {
        $product = SCProducts::findOne(512817);

        echo $product->attr_cat . '<br/>';

        $options = SCProductOptions::find()
            ->where("optionCategory = $product->attr_cat")
              ->all();

        //$option_ids = false;

        $ids = array();

        foreach ($options as $o) {
            $ids[] = $o->optionID;
        }

        print_r($ids);
    }

    /**
     * @param $action
     * @return bool
     * @throws \yii\web\BadRequestHttpException
     */
    public function beforeAction($action)
    {
        $this->enableCsrfValidation = false;

        return parent::beforeAction($action);
    }

}
