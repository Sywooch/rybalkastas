<?php

namespace common\models;

use Yii;
use yii\db\Expression;
use yii\helpers\Json;
use yii\behaviors\TimestampBehavior;
use yii\caching\TagDependency;
use yii2mod\settings\models\SettingModel;
use dvizh\cart\models\Cart;
use dvizh\cart\models\CartElement;
use corpsepk\yml\behaviors\YmlOfferBehavior;
use corpsepk\yml\models\Offer;
use phpDocumentor\Reflection\Types\Object_;
use common\models\mongo\ProductAttributes;
use common\models\mongo\ProductInfo;
use common\models\SCParsing;
use common\models\SCProductsParsing;
/**
 * This is the model class for table "SC_products".
 *
 * @property integer $productID
 * @property integer $categoryID
 * @property double $customers_rating
 * @property double $Price
 * @property integer $in_stock
 * @property integer $customer_votes
 * @property integer $items_sold
 * @property integer $enabled
 * @property double $list_price
 * @property string $product_code
 * @property integer $sort_order
 * @property integer $default_picture
 * @property string $date_added
 * @property string $date_modified
 * @property integer $viewed_times
 * @property integer $add2cart_counter
 * @property string $eproduct_filename
 * @property string $color_pic
 * @property integer $eproduct_available_days
 * @property integer $eproduct_download_times
 * @property double $weight
 * @property integer $free_shipping
 * @property integer $min_order_amount
 * @property double $shipping_freight
 * @property integer $classID
 * @property string $name_en
 * @property string $brief_description_en
 * @property string $meta_title_en
 * @property string $meta_description_en
 * @property string $meta_keywords_en
 * @property integer $ordering_available
 * @property string $slug
 * @property string $name_ru
 * @property string $brief_description_ru
 * @property string $description_ru
 * @property string $meta_title_ru
 * @property string $meta_description_ru
 * @property string $meta_keywords_ru
 * @property integer $vkontakte_update_timestamp
 * @property string $id_1c
 * @property integer $is_colorful
 * @property integer $special
 * @property integer $maxDiscount
 * @property integer $minDiscount
 * @property integer $forordering
 * @property integer $old_id
 * @property integer $showNew
 * @property integer $upload2market
 * @property integer $is_hidden
 * @property integer $in_stock_provider
 * @property string $updated_at
 * @property string $cat_path
 * @property int $vipDiscount [int(3)]
 * @property int $attr_cat [int(11)]
 * @property int $discount_for_reg [int(1)]
 * @property int $coming_soon [int(1)]
 * @property string $monufacturer_code [varchar(255)]
 * @property string $created_at [varchar(255)]
 * @property boolean $onlyRetail
 * @property int $actualPrice
 * @property $parsing
 */
class SCProducts extends \yii\db\ActiveRecord implements \dvizh\cart\interfaces\CartElement
{
    const SCENARIO_SET_PRICES = 'set_prices';
    const SCENARIO_DEFAULT = 'default';

    private static $onlyRetailList = [ //ID товаров, которые нельзя купить в ИМ
        543787
    ];

    public $cat_identified;
    public $c_cat_path;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'SC_products';
    }

    /**
     * @return \yii\db\Connection|Object.
     * @throws \yii\base\InvalidConfigException
     */
    public static function getDb()
    {
        return Yii::$app->get('db');
    }

    public function scenarios()
    {
        $scenarios = parent::scenarios(); // TODO: Change the autogenerated stub
        $scenarios[self::SCENARIO_SET_PRICES] = ['Price', 'list_price', 'maxDiscount'];
        return $scenarios;
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['categoryID', 'in_stock', 'customer_votes', 'items_sold', 'enabled', 'sort_order', 'default_picture', 'viewed_times', 'add2cart_counter', 'eproduct_available_days', 'eproduct_download_times', 'free_shipping', 'min_order_amount', 'classID', 'ordering_available', 'vkontakte_update_timestamp', 'is_colorful', 'special', 'maxDiscount', 'minDiscount', 'forordering', 'old_id', 'showNew', 'upload2market', 'is_hidden', 'in_stock_provider', 'attr_cat', 'discount_for_reg'], 'integer'],
            [['customers_rating', 'Price', 'list_price', 'weight', 'shipping_freight'], 'number'],
            [['date_added', 'date_modified'], 'safe'],
            //[['brief_description_en', 'description_en'], 'required'],
            [['brief_description_en', 'description_en', 'brief_description_ru', 'description_ru', 'created_at', 'updated_at'], 'string'],
            [['product_code'], 'string', 'max' => 25],
            [['eproduct_filename', 'color_pic', 'name_en', 'meta_title_en', 'meta_description_en', 'meta_keywords_en', 'slug', 'name_ru', 'meta_title_ru', 'meta_description_ru', 'meta_keywords_ru'], 'string', 'max' => 255],
            [['id_1c'], 'string', 'max' => 74],
            [['cat_path'], 'string'],
        ];
    }

    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'created_at',
                'updatedAtAttribute' => 'updated_at',
                'value' => new Expression('NOW()'),
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'productID' => 'Product ID',
            'categoryID' => 'Category ID',
            'customers_rating' => 'Customers Rating',
            'Price' => 'Цена',
            'in_stock' => 'Количество в наличии (сотрется при выгрузке позиции из 1С)',
            'customer_votes' => 'Customer Votes',
            'items_sold' => 'Items Sold',
            'enabled' => 'Enabled',
            'list_price' => 'List Price',
            'product_code' => 'Product Code',
            'sort_order' => 'Sort Order',
            'default_picture' => 'Default Picture',
            'date_added' => 'Date Added',
            'date_modified' => 'Date Modified',
            'viewed_times' => 'Viewed Times',
            'add2cart_counter' => 'Add2cart Counter',
            'eproduct_filename' => 'Eproduct Filename',
            'color_pic' => 'Картинка цвета',
            'eproduct_available_days' => 'Eproduct Available Days',
            'eproduct_download_times' => 'Eproduct Download Times',
            'weight' => 'Weight',
            'free_shipping' => 'Free Shipping',
            'min_order_amount' => 'Min Order Amount',
            'shipping_freight' => 'Shipping Freight',
            'classID' => 'Class ID',
            'name_en' => 'Name En',
            'brief_description_en' => 'Brief Description En',
            'description_en' => 'Description En',
            'meta_title_en' => 'Meta Title En',
            'meta_description_en' => 'Meta Description En',
            'meta_keywords_en' => 'Meta Keywords En',
            'ordering_available' => 'Ordering Available',
            'slug' => 'Slug',
            'name_ru' => 'Название',
            'brief_description_ru' => 'Описание',
            'description_ru' => 'Описание',
            'meta_title_ru' => 'Meta Title',
            'meta_description_ru' => 'Meta Description',
            'meta_keywords_ru' => 'Meta Keywords',
            'vkontakte_update_timestamp' => 'Vkontakte Update Timestamp',
            'id_1c' => 'Id 1c',
            'is_colorful' => 'Is Colorful',
            'special' => 'Special',
            'maxDiscount' => 'Max Discount',
            'minDiscount' => 'Min Discount',
            'forordering' => 'Forordering',
            'old_id' => 'Old ID',
            'showNew' => 'Новинка',
            'upload2market' => 'Upload2market',
            'is_hidden' => 'Скрыть',
            'in_stock_provider' => 'Наличие у поставщиков',
        ];
    }


    public function getCartId()
    {
        return $this->productID;
    }

    public function getCartName()
    {
        return $this->name_ru;
    }

    public function getCartPrice()
    {
        return $this->actualPrice;
    }

    //Опции продукта для выбора при добавлении в корзину
    public function getCartOptions()
    {
        return [];
    }

    public function getInCart()
    {
        $item = CartElement::find()->where(['cart_id' => Yii::$app->cart->cart->id])->andWhere(['item_id' => $this->productID])->one();
        if (empty($item)) return 0;
        else return $item->count;
    }

    public function getCategory()
    {
        return SCCategories::findOne($this->categoryID);
    }

    public function getActualPrice()
    {
        $price = $this->Price;

        if (!\Yii::$app->user->isGuest) {
            $card = \Yii::$app->user->identity->customer->card;
            $discountSet = 0;
            if (!empty($card) && !$this->hasDiscount) {
                $maxDiscount = $this->maxDiscount;
                $divider = $this->Price / 100 * $maxDiscount;
                $price = $price - $divider;
                $discountSet = 1;
            }
            if ($discountSet == 0) {
                if ($this->discount_for_reg == 1 && ($this->Price == $this->list_price || $this->list_price == 0)) {
                    $maxDiscount = $this->maxDiscount;
                    $divider = $this->Price / 100 * $maxDiscount;
                    $price = $price - $divider;
                }
            }
        }

        return $price;
    }

    public function getHasDiscount()
    {
        if ($this->list_price > $this->Price) {
            return true;
        }

        return false;
    }

    public function getPicurl()
    {
        $model = SCProductPictures::find()->where("productID = $this->productID AND priority = 0 OR productID = $this->productID AND priority = 1")->one();
        if (!empty($model)) {
            return $model->filename;
        } else {
            return null;
        }
    }

    public function getThumburl()
    {
        $model = SCProductPictures::find()->where("productID = $this->productID AND priority = 0 OR productID = $this->productID AND priority = 1")->one();
        if (!empty($model)) {
            return $model->thumbnail;
        } else {
            return null;
        }
    }

    public function getPics()
    {
        return $this->hasMany(SCProductPictures::className(), ['productID' => 'productID']);
    }

    public function getPictures()
    {
        $model = SCProductPictures::find()->where("productID = $this->productID")->orderBy('priority')->all();
        return $model;
    }

    public function getMongoAttrs()
    {
        $model = ProductAttributes::find()
            ->where(['product_id' => $this->productID])
            ->one();

        return $model->params;
    }

    public function getAttrs()
    {
        $cache = Yii::$app->cache;
        $productID = $this->productID;
        if ($this->category->menutype == 2 && !$this->isCanon && !empty($this->canon)) {
            $productID = $this->canon->productID;
        }

        if (!empty($this->attr_cat)) {
            $key = "option_category_options_" . $this->attr_cat;
            $options = SCProductOptions::find()->where("optionCategory = $this->attr_cat")->all();

            $ids = $cache->get($key);
            if ($ids === false) {
                $ids = array();
                foreach ($options as $o) {
                    $checkNew = SCProductOptionsValues::find()->where("productID = $productID")->andWhere(['optionID' => $o->optionID])->one();
                    if (empty($checkNew)) {
                        $mpo = new SCProductOptionsValues();
                        $mpo->productID = $productID;
                        $mpo->option_type = 1;
                        $mpo->optionID = $o->optionID;
                        $mpo->option_show_times = 1;
                        $mpo->option_value_ru = "";
                        $mpo->save(false);
                    }
                    $ids[] = $o->optionID;
                }
                $cache->set($key, $ids);
            }
            return SCProductOptionsValues::find()->where("productID = $productID")->andWhere(['in', 'optionID', $ids])->all();

        } else {
            $key = "product_options_values_" . $productID;
            return SCProductOptionsValues::find()->where("productID = $productID AND option_value_ru <> ''")->all();
        }

        return $model;
    }

    public function getAttrsNext()
    {
        $cache = Yii::$app->cache;
        $productID = $this->productID;

        if ($this->category->menutype == 2 && !$this->isCanon && !empty($this->canon)) {
            $productID = $this->canon->productID;
        }

        if (!empty($this->attr_cat)) {
            $key = "option_category_options_" . $this->attr_cat;
            $options = SCProductOptions::find()->where("optionCategory = $this->attr_cat")->all();

            $option_ids = false;
            if ($option_ids === false) {
                $ids = array();
                foreach ($options as $o) {
                    $checkNew = SCProductOptionsValues::find()->where("productID = $productID")->andWhere(['optionID' => $o->optionID])->one();
                    if (empty($checkNew)) {
                        $mpo = new SCProductOptionsValues();
                        $mpo->productID = $productID;
                        $mpo->option_type = 1;
                        $mpo->optionID = $o->optionID;
                        $mpo->option_show_times = 1;
                        $mpo->option_value_ru = "";
                        $mpo->save(false);
                    }
                    $ids[] = $o->optionID;
                }
                $cache->set($key, $ids);
            }
            $key = "product_options_values_" . $productID;
            return SCProductOptionsValues::find()->with('option')->where("productID = $productID")->andWhere(['in', 'optionID', $ids])->asArray()->all();

        } else {
            $key = "product_options_values_" . $productID;
            return SCProductOptionsValues::find()->with('option')->where("productID = $productID AND option_value_ru <> ''")->asArray()->all();
        }

        return $model;
    }

    public function getExtraPrices()
    {
        return $this->hasMany(SCProductsExtraPrice::class, ['productID' => 'productID']);
    }

    public function afterFind()
    {
        if (!empty($this->attr_cat)) {
            $this->cat_identified = true;
        } else {
            $this->cat_identified = false;
        }


        /*$exkey = $this->productID . '_10price';
        $extraPrices = Yii::$app->cache->get($exkey);
        if ($extraPrices === false) {
            $extraPrices = [];
            if (!empty($this->extraPrices)) {
                foreach ($this->extraPrices as $ep) {
                    $extraPrices[$ep['key']] = $ep->toArray();
                }
            }
            Yii::$app->cache->set($exkey, $extraPrices, 6000, new TagDependency([
                'tags' => 'extra_prices',
            ]));
        }


        if (php_sapi_name() !== "cli" && !Yii::$app->user->isGuest && Yii::$app->user->identity->customer && !empty($extraPrices['bf_big'])) {
            $key = 'countSuccessOrders_' . Yii::$app->user->identity->customer->customerID;
            $countOrders = Yii::$app->cache->get($key);
            if ($countOrders === false) {
                $customer = Yii::$app->user->identity->customer;
                $countOrders = SCOrders::find()->where(['OR', ['customerID' => $customer, 'customer_email' => Yii::$app->user->identity->email]])->andWhere(['statusID' => 5])->count();
                Yii::$app->cache->set($key, $countOrders, 18400);
            }
            $big = $extraPrices['bf_big'];
            if ($countOrders >= 4) {
                $this->Price = $big['Price'];
                $this->list_price = $big['list_price'];
                $this->maxDiscount = $big['maxDiscount'];
                return true;
            }
        }


        $priceKey = null;
        foreach ($extraPrices as $k => $exp) {
            if ($k == 'bf_big') continue;
            $priceKey = $k;
        }


        if (empty($priceKey)) return true;
        $this->Price = $extraPrices[$priceKey]['Price'];
        $this->list_price = $extraPrices[$priceKey]['list_price'];
        $this->maxDiscount = $extraPrices[$priceKey]['maxDiscount'];*/

        //}

        /*if(Yii::$app->user->can('superField')){
            $this->Price = 1;
            $this->list_price = 1;
            $this->maxDiscount = 1;
        }*/

    }

    public function afterSave($insert, $changedAttributes)
    {
        if (!$this->scenario !== self::SCENARIO_SET_PRICES) {
            if (!empty($changedAttributes)) {
                $needToReset = true;
                $dirty = $this->getDirtyAttributes();
                \Yii::trace(Json::encode($dirty), 'retrace');
                \Yii::trace(Json::encode($changedAttributes), 'retrace');

                if (!empty($changedAttributes['Price'])) {
                    $needToReset = true;
                }

                if ($needToReset) {
                    TagDependency::invalidate(Yii::$app->cache, 'option_category_options_' . $this->attr_cat);
                    TagDependency::invalidate(Yii::$app->cache, 'product_options_values_' . $this->productID);
                    TagDependency::invalidate(Yii::$app->cache, 'product_' . $this->productID);
                    TagDependency::invalidate(Yii::$app->cache, 'category_' . $this->categoryID);
                    //TagDependency::invalidate(Yii::$app->cache, 'xasdCasd');
                    TagDependency::invalidate(Yii::$app->dbCache, 'category_' . $this->categoryID);
                    TagDependency::invalidate(Yii::$app->dbCache, 'product_' . $this->productID);
                }
            }

            try {
                if (!empty($this->category)) {
                    $this->category->resetMeta();
                }
            } catch (\Exception $e) {
                \Yii::$app->bot->sendMessage(-14068578, $this->product_code . ': Ошибка генерации метаданных');
                \Yii::$app->bot->sendMessage(-14068578, $e->getTraceAsString());
            }

            $this->buildLinkage();

            parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        }
    }

    public function getTypename()
    {
        if (!empty($this->attr_cat)) {
            $cat = SCProductOptionsCategoryes::find()->where("categoryID = $this->attr_cat")->one();
            if ($cat) {
                return $cat->category_name_ru;
            }
        } else {
            return false;
        }
    }

    public function getInSpecials()
    {
        $data = SCSpecials::find()->where("productID = $this->productID")->one();

        if (!empty($data)) return true;

        return false;
    }

    public function getInSlider()
    {
        $data = SCSpecialsSlider::find()->where("product_id = $this->productID")->one();

        if (!empty($data)) return true;

        return false;
    }

    public function getNormalPrice()
    {
        return number_format($this->Price, 2);
    }

    public function getNormalActualPrice()
    {
        return number_format($this->actualPrice, 2);
    }

    public function getOldPrice()
    {
        return number_format($this->list_price, 2);
    }

    public function getDiscountedPrice()
    {
        if (empty($this->maxDiscount)) return false;
        if (empty($_SESSION["log"])) return false;
        if (!empty($this->list_price) && $this->Price < $this->list_price) return number_format($this->Price, 2);

        //$uid = regGetIdByLogin($_SESSION["log"]);

        $percent = 100 - $this->maxDiscount;
        $per_price = $this->Price / 100;
        $end_price = $per_price * $percent;
        return number_format($end_price, 2);;
    }

    public function getStockStr()
    {
        if ($this->in_stock == 0) {
            $txt = "Нет в наличии";
        } elseif ($this->in_stock == $this->in_stock_provider) {
            $txt = "В наличии <br/>(доставка до 4 дней)";
        } else {
            $txt = "В наличии";
        }

        return str_replace(' ', '&nbsp;', $txt);
    }

    public function getStockBool()
    {
        if ($this->in_stock == 0) {
            return 0;
        } elseif ($this->in_stock == $this->in_stock_provider) {
            return 1;
        } else {
            return 1;
        }
    }

    public function getIsCanon()
    {
        if (!$this->getCanon()) return true;

        if ($this->getCanon()->productID == $this->productID) {
            return true;
        }
        return false;
    }

    public function withoutVideo($str)
    {
        $regexp = "~<iframe(.*?)</iframe>~Usi";
        $str = preg_replace($regexp, "", $str);
        return $str;
    }

    public function getCanon()
    {
        $cache = Yii::$app->cache;
        $key = 'canon2_of_' . $this->categoryID;
        $model = $cache->get($key);

        if ($model === false) {
            $q = Yii::$app->db->createCommand("SELECT SC_products.productID FROM SC_products LEFT JOIN SC_product_options_values ON SC_products.productID = SC_product_options_values.productID WHERE option_value_ru <> '' AND categoryID='$this->categoryID' ORDER BY name_ru ASC LIMIT 1");
            $res = $q->queryOne();

            if (empty($res)) {
                $model = SCProducts::find()->where(['categoryID' => $this->categoryID])->orderBy(['productID' => SORT_ASC])->one();
            } else {
                $model = SCProducts::findOne($res['productID']);
            }

            $cache->set($key, $model, 999999);
        }

        return $model;
    }

    public function getPicture()
    {
        return $this->picurl;
    }

    public function optionValue($optionID)
    {
        $data = SCProductOptionsValues::find()->where(['productID' => $this->productID])->andWhere(['optionID' => $optionID])->one()->option_value_ru;
        return $data;
    }

    public function getInTrash()
    {
        $check = Trash::find()->where(['item_id' => $this->getPrimaryKey(), 'class' => get_class($this)])->one();

        if (!empty($check)) return true;

        return false;
    }

    public function getCountInCart()
    {
        $cart = Yii::$app->cart;
        $el = CartElement::find()->where(['cart_id' => $cart->cart->id])->andWhere(['item_id' => $this->productID])->one();

        if (empty($el)) return 0;

        return $el->count;
    }

    public function getCanAdd()
    {
        if (!empty($this->countInCart) && $this->countInCart > 0 && $this->in_stock <= $this->countInCart)
            return 'Товар закончился';

        if ($this->in_stock <= 0) {
            if (!empty($this->category->na_message)) {
                return $this->category->na_message;
            } else {
                return 'Нет в наличии';
            }
        }

        if ($this->Price <= 0) return 'Временно недоступно';

        return 1;
    }


    public function getStockString()
    {
        if ($this->in_stock > 0 && $this->in_stock_provider == 0) {
            return [];
        } elseif ($this->in_stock == $this->in_stock_provider && $this->in_stock > 0) {
            return ["label" => "Формирование заказа", "value" => "от 1 до 7 РАБОЧИХ дней"];
        } elseif ($this->in_stock > $this->in_stock_provider && $this->in_stock > 0) {
            return [];
        }
    }

    public function getStockStringByCartCount($count)
    {
        $actualStock = $this->in_stock - $this->in_stock_provider;
        if ($count > $actualStock) {
            return "Формирование заказа от 1 до 7 РАБОЧИХ дней";
        } else {
            return null;
        }
    }

    public function getCountLater()
    {
        return SCLaterProducts::find()->where(['productID' => $this->productID])->count();
    }

    public function getUserIsSubscribed()
    {
        $m = SCProductRequest::find()->where(['productID' => $this->productID])->andWhere(['customerID' => Yii::$app->user->identity->customer->customerID])->one();

        if (!empty($m)) return true;

        return false;
    }

    public function buildLinkage()
    {
        $m = ProductInfo::find()->where(['product_id' => $this->productID])->one();

        if (empty($m)) {
            $m = new ProductInfo();
            $m->product_id = $this->productID;
        }

        $m->category_id = $this->categoryID;
        $m->name = $this->name_ru;
        $m->price = $this->Price;
        $m->old_price = $this->list_price;
        $m->discount_percent = $this->maxDiscount;
        $m->in_stock = $this->in_stock;
        $m->in_stock_provider = $this->in_stock_provider;
        $m->monufacturer = !empty($this->category->monufacturer) ? ucfirst(htmlspecialchars($this->category->monufacturer)) : null;
        $m->description = $this->description_ru;
        $m->pictures = SCProductPictures::find()->where("productID = $this->productID")->orderBy('priority')->asArray()->all();
        $m->market = $this->upload2market == 1 ? true : false;
        $attrs = [];
        $attrTarget = $this;

        if (empty($attrTarget->attrs)) {
            $attrTarget = $this->canon;
        }

        if (!empty($attrTarget) && !empty($attrTarget->attrs)) {
            foreach ($attrTarget->attrs as $attr) {
                $pname = htmlspecialchars($attr->optionName);
                if ($pname == 'RUSIZE') {
                    $pname = 'Размер';
                }
                $attrs[] = ['name' => $pname, 'value' => $attr->option_value_ru, 'id' => $attr->optionID];
            }
        }

        $m->params = $attrs;
        $m->save();

        SettingModel::updateAll(['value' => Yii::$app->formatter->asDate('now', 'php:Y-m-d H:i')], ['section' => 'market', 'key' => 'lastupdate']);
    }

    public function getLinkage()
    {
        return ProductInfo::find()->where(['product_id' => $this->productID])->one();
    }

    public function getOnlyRetail()
    {
        return array_search($this->productID, self::$onlyRetailList) !== false ? true : false;
    }

    public function getParsing()
    {

            return $this
                ->hasMany(SCParsing::className(), ['id' => 'parsing_id'])
                ->viaTable('sc_products_parsing', ['product_id' => 'productID']);


    }

    public function getName()
    {

        return $this
            ->hasMany(SCParsing::className(), ['name' => 'parsing_name'])
            ->viaTable('sc_products_parsing', ['parsing_name' => 'name_ru']);

    }
}



